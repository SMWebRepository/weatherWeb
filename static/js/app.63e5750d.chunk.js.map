{"version":3,"sources":["src/Loading.tsx","src/components/Weather.tsx","App.tsx"],"names":["Loading","View","style","styles","container","StatusBar","barStyle","Text","text","StyleSheet","create","flex","justifyContent","paddingHorizontal","paddingVertical","backgroundColor","color","fontSize","weatherOptions","Thunderstorm","iconName","gradient","title","subtitle","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Mist","Dust","Haze","Weather","temp","condition","LinearGradient","colors","halfContainer","MaterialCommunityIcons","name","size","textContainer","alignItems","fontWeight","marginBottom","App","useState","isLoading","setIsLoading","setTemp","setCondition","getWeather","latitude","longitude","a","async","axios","get","data","main","weather","useEffect","Location","coords","Alert","alert","getLocation","Math","round"],"mappings":"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","file":"static/js/app.63e5750d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, View, StatusBar } from 'react-native';\r\n\r\nexport const Loading = () => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar barStyle=\"dark-content\" />\r\n      <Text style={styles.text}>Getting the weather</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'flex-end',\r\n    paddingHorizontal: 30,\r\n    paddingVertical: 100,\r\n    backgroundColor: '#fdf6aa'\r\n  },\r\n  text: {\r\n    color: '#2c2c2c',\r\n    fontSize: 30\r\n  }\r\n});\r\n","import React from 'react';\r\nimport { View, Text, StyleSheet, StatusBar } from 'react-native';\r\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nexport type WeatherProps = {\r\n  temp: number;\r\n  condition:\r\n    | 'Thunderstorm'\r\n    | 'Drizzle'\r\n    | 'Rain'\r\n    | 'Snow'\r\n    | 'Atmosphere'\r\n    | 'Clear'\r\n    | 'Clouds'\r\n    | 'Haze'\r\n    | 'Mist'\r\n    | 'Dust';\r\n};\r\n\r\nconst weatherOptions = {\r\n  Thunderstorm: {\r\n    iconName: 'weather-lightning',\r\n    gradient: ['#373B44', '#4286f4'],\r\n    title: 'Thunderstorm in the house',\r\n    subtitle: 'Actually, outside of the house'\r\n  },\r\n  Drizzle: {\r\n    iconName: 'weather-hail',\r\n    gradient: ['#89F7FE', '#66A6FF'],\r\n    title: 'Drizzle',\r\n    subtitle: 'Is like rain.'\r\n  },\r\n  Rain: {\r\n    iconName: 'weather-rainy',\r\n    gradient: ['#00C6FB', '#005BEA'],\r\n    title: 'Raining like a MF',\r\n    subtitle: 'For more info look outside'\r\n  },\r\n  Snow: {\r\n    iconName: 'weather-snowy',\r\n    gradient: ['#7DE2FC', '#B9B6E5'],\r\n    title: 'Cold as balls',\r\n    subtitle: 'Do you want to build a snowman? no.'\r\n  },\r\n  Atmosphere: {\r\n    iconName: 'weather-hail',\r\n    gradient: ['#89F7FE', '#66A6FF']\r\n  },\r\n  Clear: {\r\n    iconName: 'weather-sunny',\r\n    gradient: ['#FF7300', '#FEF253'],\r\n    title: 'Sunny as fuck',\r\n    subtitle: 'Go outside!'\r\n  },\r\n  Clouds: {\r\n    iconName: 'weather-cloudy',\r\n    gradient: ['#D7D2CC', '#304352'],\r\n    title: 'Clouds',\r\n    subtitle: 'I know, boring'\r\n  },\r\n  Mist: {\r\n    iconName: 'weather-hail',\r\n    gradient: ['#4DA0B0', '#D39D38'],\r\n    title: 'Mist!',\r\n    subtitle: \"It's like you have no glasses on.\"\r\n  },\r\n  Dust: {\r\n    iconName: 'weather-hail',\r\n    gradient: ['#4DA0B0', '#D39D38'],\r\n    title: 'Dusty',\r\n    subtitle: 'hails coming'\r\n  },\r\n  Haze: {\r\n    iconName: 'weather-hail',\r\n    gradient: ['#4DA0B0', '#D39D38'],\r\n    title: 'Haze',\r\n    subtitle: \"Just don't go outside.\"\r\n  }\r\n};\r\n\r\nexport const Weather = ({ temp, condition }: WeatherProps) => {\r\n  return (\r\n    <LinearGradient colors={weatherOptions[condition].gradient} style={styles.container}>\r\n      <StatusBar barStyle=\"light-content\" />\r\n      <View style={styles.halfContainer}>\r\n        <MaterialCommunityIcons\r\n          name={\r\n            weatherOptions[condition].iconName as React.ComponentProps<\r\n              typeof MaterialCommunityIcons\r\n            >['name']\r\n          }\r\n          size={86}\r\n          color={'white'}\r\n        />\r\n        <Text style={styles.temp}>{temp}Â°</Text>\r\n      </View>\r\n      <View style={{ ...styles.halfContainer, ...styles.textContainer }}>\r\n        <Text style={styles.title}>{weatherOptions[condition].title}</Text>\r\n        <Text style={styles.subtitle}>{weatherOptions[condition].subtitle}</Text>\r\n      </View>\r\n    </LinearGradient>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  temp: {\r\n    fontSize: 42,\r\n    color: 'white'\r\n  },\r\n  halfContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  title: {\r\n    color: 'white',\r\n    fontSize: 44,\r\n    fontWeight: '300',\r\n    marginBottom: 20\r\n  },\r\n  subtitle: {\r\n    color: 'white',\r\n    fontWeight: '600',\r\n    fontSize: 24\r\n  },\r\n  textContainer: {\r\n    paddingHorizontal: 20,\r\n    alignItems: 'flex-start'\r\n  }\r\n});\r\n","import React, { useEffect, useState } from 'react';\nimport { Alert } from 'react-native';\nimport { Loading } from './src/Loading';\nimport * as Location from 'expo-location';\nimport axios from 'axios';\nimport { Weather, WeatherProps } from './src/components/Weather';\n\nconst API_KEY = 'b71a127e3290a87e85e0a0a49d91453d';\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [temp, setTemp] = useState<number>(0);\n  const [condition, setCondition] = useState<WeatherProps['condition']>('Clear');\n\n  const getWeather = async (latitude: number, longitude: number) => {\n    const {\n      data: {\n        main: { temp },\n        weather\n      }\n    } = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`\n    );\n    setIsLoading(false);\n    setCondition(weather[0].main);\n    setTemp(temp);\n  };\n  const getLocation = async () => {\n    try {\n      await Location.requestForegroundPermissionsAsync();\n      const {\n        coords: { latitude, longitude }\n      } = await Location.getCurrentPositionAsync();\n      getWeather(latitude, longitude);\n      setIsLoading(true);\n    } catch (error) {\n      Alert.alert(\"Can't find you.\", 'So sad');\n    }\n  };\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  return isLoading ? (\n    <Loading />\n  ) : (\n    <Weather temp={Math.round(temp)} condition={condition} />\n  );\n}\n"],"sourceRoot":""}